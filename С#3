using System;

namespace ArrayTasks
{
    class Program
    {
        static void Main(string[] args)
        {
            Task1(); // Вызов метода Task1, который выполняет первую задачу.
            Task2(); // Вызов метода Task2, который выполняет вторую задачу.
        }

        static void Task1()
        {
            Console.WriteLine("Задача 1:"); // Вывод заголовка задачи в консоль.

            // Объявление массивов
            double[] A = new double[5]; // Объявление и инициализация одномерного массива A типа double, содержащего 5 элементов.
            double[,] B = new double[3, 4]; // Объявление и инициализация двумерного массива B типа double, содержащего 3 строки и 4 столбца.

            // Заполнение массива A числами с клавиатуры
            Console.WriteLine("Введите 5 чисел для массива A:"); // Вывод приглашения пользователю ввести 5 чисел для массива A.
            for (int i = 0; i < A.Length; i++) // Цикл для перебора элементов массива A.
            {
                Console.Write($"A[{i}] = "); // Вывод приглашения для ввода значения элемента A[i].

                // Цикл для обеспечения корректного ввода числового значения для элемента A[i].
                while (!double.TryParse(Console.ReadLine(), out A[i])) // double.TryParse пытается преобразовать ввод пользователя в double. Если преобразование удалось, значение сохраняется в A[i] и возвращается true. В противном случае возвращается false.
                {
                    Console.WriteLine("Некорректный ввод. Введите число:"); // Вывод сообщения об ошибке, если ввод некорректен.
                    Console.Write($"A[{i}] = "); // Повторный вывод приглашения для ввода значения элемента A[i].
                }
            }

            // Заполнение массива B случайными числами
            Random random = new Random(); // Создание экземпляра класса Random для генерации случайных чисел.
            for (int i = 0; i < B.GetLength(0); i++) // Цикл для перебора строк массива B. B.GetLength(0) возвращает количество строк в массиве.
            {
                for (int j = 0; j < B.GetLength(1); j++) // Цикл для перебора столбцов массива B. B.GetLength(1) возвращает количество столбцов в массиве.
                {
                    B[i, j] = random.NextDouble(); // Присваивание элементу B[i, j] случайного числа типа double в диапазоне от 0.0 до 1.0.
                }
            }

            // Вывод массива A
            Console.Write("Массив A: "); // Вывод сообщения "Массив A: " в консоль.
            foreach (double element in A) // Цикл foreach для перебора элементов массива A.
            {
                Console.Write(element + " "); // Вывод каждого элемента массива A с добавлением пробела.
            }
            Console.WriteLine(); // Перевод курсора на новую строку после вывода всех элементов массива A.

            // Вывод массива B
            Console.WriteLine("Массив B:"); // Вывод сообщения "Массив B:" в консоль.
            for (int i = 0; i < B.GetLength(0); i++) // Цикл для перебора строк массива B.
            {
                for (int j = 0; j < B.GetLength(1); j++) // Цикл для перебора столбцов массива B.
                {
                    Console.Write(B[i, j] + "\t"); // Вывод элемента B[i, j] с добавлением символа табуляции для выравнивания.
                }
                Console.WriteLine(); // Перевод курсора на новую строку после вывода всех элементов строки массива B.
            }

            // Поиск общего максимального и минимального элемента
            double maxElement = A[0]; // Инициализация переменной maxElement значением первого элемента массива A.
            double minElement = A[0]; // Инициализация переменной minElement значением первого элемента массива A.

            // Поиск максимального и минимального элементов в массиве A
            foreach (double element in A) // Цикл foreach для перебора элементов массива A.
            {
                if (element > maxElement) maxElement = element; // Если текущий элемент больше maxElement, то maxElement присваивается значение текущего элемента.
                if (element < minElement) minElement = element; // Если текущий элемент меньше minElement, то minElement присваивается значение текущего элемента.
            }

            // Поиск максимального и минимального элементов в массиве B
            for (int i = 0; i < B.GetLength(0); i++) // Цикл для перебора строк массива B.
            {
                for (int j = 0; j < B.GetLength(1); j++) // Цикл для перебора столбцов массива B.
                {
                    if (B[i, j] > maxElement) maxElement = B[i, j]; // Если текущий элемент больше maxElement, то maxElement присваивается значение текущего элемента.
                    if (B[i, j] < minElement) minElement = B[i, j]; // Если текущий элемент меньше minElement, то minElement присваивается значение текущего элемента.
                }
            }

            Console.WriteLine($"Общий максимальный элемент: {maxElement}"); // Вывод общего максимального элемента.
            Console.WriteLine($"Общий минимальный элемент: {minElement}"); // Вывод общего минимального элемента.

            // Вычисление общей суммы всех элементов
            double totalSum = 0; // Инициализация переменной totalSum для хранения суммы всех элементов массивов A и B.
            foreach (double element in A) // Цикл foreach для перебора элементов массива A.
            {
                totalSum += element; // Добавление каждого элемента массива A к totalSum.
            }
            for (int i = 0; i < B.GetLength(0); i++) // Цикл для перебора строк массива B.
            {
                for (int j = 0; j < B.GetLength(1); j++) // Цикл для перебора столбцов массива B.
                {
                    totalSum += B[i, j]; // Добавление каждого элемента массива B к totalSum.
                }
            }
            Console.WriteLine($"Общая сумма всех элементов: {totalSum}"); // Вывод общей суммы всех элементов массивов A и B.

            // Вычисление общего произведения всех элементов
            double totalProduct = 1; // Инициализация переменной totalProduct для хранения произведения всех элементов массивов A и B. Начинаем с 1, так как умножение на 0 всегда даст 0.
            foreach (double element in A) // Цикл foreach для перебора элементов массива A.
            {
                totalProduct *= element; // Умножение totalProduct на каждый элемент массива A.
            }
            for (int i = 0; i < B.GetLength(0); i++) // Цикл для перебора строк массива B.
            {
                for (int j = 0; j < B.GetLength(1); j++) // Цикл для перебора столбцов массива B.
                {
                    totalProduct *= B[i, j]; // Умножение totalProduct на каждый элемент массива B.
                }
            }
            Console.WriteLine($"Общее произведение всех элементов: {totalProduct}"); // Вывод общего произведения всех элементов массивов A и B.

            // Вычисление суммы четных элементов массива A
            double sumEvenA = 0; // Инициализация переменной sumEvenA для хранения суммы четных элементов массива A.
            foreach (double element in A) // Цикл foreach для перебора элементов массива A.
            {
                if (element % 2 == 0) // Проверка, является ли текущий элемент четным (остаток от деления на 2 равен 0).
                {
                    sumEvenA += element; // Добавление четного элемента к sumEvenA.
                }
            }
            Console.WriteLine($"Сумма четных элементов массива A: {sumEvenA}"); // Вывод суммы четных элементов массива A.

            // Вычисление суммы нечетных столбцов массива B
            double sumOddColumnsB = 0; // Инициализация переменной sumOddColumnsB для хранения суммы элементов нечетных столбцов массива B.
            for (int j = 0; j < B.GetLength(1); j++) // Цикл для перебора столбцов массива B.
            {
                if (j % 2 != 0) // Проверка, является ли текущий столбец нечетным (остаток от деления на 2 не равен 0).
                {
                    for (int i = 0; i < B.GetLength(0); i++) // Цикл для перебора строк массива B.
                    {
                        sumOddColumnsB += B[i, j]; // Добавление каждого элемента нечетного столбца к sumOddColumnsB.
                    }
                }
            }
            Console.WriteLine($"Сумма нечетных столбцов массива B: {sumOddColumnsB}"); // Вывод суммы элементов нечетных столбцов массива B.
        }

        static void Task2()
        {
            Console.WriteLine("\nЗадача 2:"); // Вывод заголовка задачи в консоль.

            // Объявление и заполнение двумерного массива
            int[,] array = new int[5, 5]; // Объявление и инициализация двумерного массива array типа int, содержащего 5 строк и 5 столбцов.
            Random random = new Random(); // Создание экземпляра класса Random для генерации случайных чисел.
            for (int i = 0; i < array.GetLength(0); i++) // Цикл для перебора строк массива array.
            {
                for (int j = 0; j < array.GetLength(1); j++) // Цикл для перебора столбцов массива array.
                {
                    array[i, j] = random.Next(-100, 101); // Присваивание элементу array[i, j] случайного целого числа в диапазоне от -100 до 100.
                }
            }

            // Вывод массива
            Console.WriteLine("Массив:"); // Вывод сообщения "Массив:" в консоль.
            for (int i = 0; i < array.GetLength(0); i++) // Цикл для перебора строк массива array.
            {
                for (int j = 0; j < array.GetLength(1); j++) // Цикл для перебора столбцов массива array.
                {
                    Console.Write(array[i, j] + "\t"); // Вывод элемента array[i, j] с добавлением символа табуляции для выравнивания.
                }
                Console.WriteLine(); // Перевод курсора на новую строку после вывода всех элементов строки массива array.
            }

            // Поиск минимального и максимального элемента и их индексов
            int minElement = array[0, 0]; // Инициализация переменной minElement первым элементом массива.
            int maxElement = array[0, 0]; // Инициализация переменной maxElement первым элементом массива.
            int minRowIndex = 0; // Инициализация переменной minRowIndex индексом строки первого элемента массива.
            int minColIndex = 0; // Инициализация переменной minColIndex индексом столбца первого элемента массива.
            int maxRowIndex = 0; // Инициализация переменной maxRowIndex индексом строки первого элемента массива.
            int maxColIndex = 0; // Инициализация переменной maxColIndex индексом столбца первого элемента массива.

            for (int i = 0; i < array.GetLength(0); i++) // Цикл для перебора строк массива array.
            {
                for (int j = 0; j < array.GetLength(1); j++) // Цикл для перебора столбцов массива array.
                {
                    if (array[i, j] < minElement) // Если текущий элемент меньше minElement.
                    {
                        minElement = array[i, j]; // Обновляем значение minElement.
                        minRowIndex = i; // Обновляем индекс строки минимального элемента.
                        minColIndex = j; // Обновляем индекс столбца минимального элемента.
                    }
                    if (array[i, j] > maxElement) // Если текущий элемент больше maxElement.
                    {
                        maxElement = array[i, j]; // Обновляем значение maxElement.
                        maxRowIndex = i; // Обновляем индекс строки максимального элемента.
                        maxColIndex = j; // Обновляем индекс столбца максимального элемента.
                    }
                }
            }

            Console.WriteLine($"Минимальный элемент: {minElement} (индекс: [{minRowIndex}, {minColIndex}])"); // Вывод минимального элемента и его индексов.
            Console.WriteLine($"Максимальный элемент: {maxElement} (индекс: [{maxRowIndex}, {maxColIndex}])"); // Вывод максимального элемента и его индексов.

            // Вычисление суммы элементов между минимальным и максимальным
            int sumBetween = 0; // Инициализация переменной sumBetween для хранения суммы элементов между минимальным и максимальным.

            // Определяем координаты начала и конца суммирования (в порядке обхода массива)
            int startRow, startCol, endRow, endCol; // Объявление переменных для хранения координат начала и конца суммирования.

            // Определяем, какой элемент (минимальный или максимальный) находится раньше в порядке обхода массива.
            if (minRowIndex < maxRowIndex || (minRowIndex == maxRowIndex && minColIndex < maxColIndex)) //Проверяем, что координаты min находятся перед координатами max
            {
                startRow = minRowIndex; //Присваиваем start координаты min
                startCol = minColIndex;
                endRow = maxRowIndex; //Присваиваем end координаты max
                endCol = maxColIndex;
            }
            else //Если координаты max находятся перед координатами min
            {
                startRow = maxRowIndex; //Присваиваем start координаты max
                startCol = maxColIndex;
                endRow = minRowIndex; //Присваиваем end координаты min
                endCol = minColIndex;
            }

            bool startCounting = false; // Флаг, указывающий, нужно ли начинать суммирование.

            // Перебор элементов массива для суммирования элементов между минимальным и максимальным.
            for (int i = 0; i < array.GetLength(0); i++) // Цикл для перебора строк массива array.
            {
                for (int j = 0; j < array.GetLength(1); j++) // Цикл для перебора столбцов массива array.
                {
                    // Проверяем, достигли ли мы начальной точки суммирования
                    if (i == startRow && j == startCol) //Если текущий элемент является начальным
                    {
                        startCounting = true; //Устанавливаем флаг true, для начала суммирования
                    }

                    // Начинаем суммирование, если флаг установлен
                    if (startCounting) //Если startCounting true
                    {
                        // Пропускаем начальный элемент (минимум или максимум)
                        if (!(i == startRow && j == startCol)) //Если это не стартовый элемент
                        {
                            sumBetween += array[i, j]; //Добавляем элемент к сумме
                        }
                    }

                    // Проверяем, достигли ли мы конечной точки суммирования
                    if (i == endRow && j == endCol) //Если это конечный элемент
                    {
                        startCounting = false; //Устанавливаем flag в false, завершаем суммирование
                        break;  //Выходим из цикла перебора столбцов
                    }
                }
                if (!startCounting && i > startRow) break; //Если суммирование закончилось и строка больше начальной, выходим из цикла строк
            }

            Console.WriteLine($"Сумма элементов между минимальным
