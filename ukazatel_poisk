#include <iostream> 
using namespace std;

// Задание 1: Рекурсивный бинарный поиск

int recursiveBinarySearch(const int arr[], int target, int left, int right) {
    // Базовый случай: если левая граница превышает правую, значит, элемент не найден
    if (left > right) {
        return -1; // Возвращаем -1, чтобы указать, что элемент не найден
    }

    // Вычисляем индекс среднего элемента. Используем формулу left + (right - left) / 2,
    // чтобы избежать переполнения при больших значениях left и right
    int mid = left + (right - left) / 2;

    // Проверяем, равен ли средний элемент искомому
    if (arr[mid] == target) {
        return mid; // Если да, возвращаем индекс среднего элемента
    }
    // Если средний элемент меньше искомого, значит, искомый элемент может находиться
    // только в правой половине массива. Рекурсивно вызываем бинарный поиск для правой половины.
    else if (arr[mid] < target) {
        return recursiveBinarySearch(arr, target, mid + 1, right); // Рекурсивный вызов для правой половины
    }
    // Если средний элемент больше искомого, значит, искомый элемент может находиться
    // только в левой половине массива. Рекурсивно вызываем бинарный поиск для левой половины.
    else {
        return recursiveBinarySearch(arr, target, left, mid - 1); // Рекурсивный вызов для левой половины
    }
}
// Задание 2: Рекурсивный сдвиг массива вправо

void recursiveRightShift(int** matrix, int rows, int cols, int shifts, int row = 0) {
    // Базовый случай 1: Если мы достигли конца массива (обработали все строки)
    if (row == rows) {
        return; // Завершаем рекурсию
    }

    // Обрабатываем сдвиги для текущей строки
    if (shifts > 0) {
        // Выполняем сдвиг на одну позицию вправо для текущей строки

        // Сохраняем последний элемент строки во временную переменную
        int temp = matrix[row][cols - 1];

        //  Сдвигаем элементы строки на одну позицию вправо (начиная с конца)
        for (int col = cols - 1; col > 0; --col) {
            matrix[row][col] = matrix[row][col - 1]; // Переносим элементы вправо
        }

        //   Помещаем сохраненный последний элемент на первое место
        matrix[row][0] = temp;

        // Рекурсивный вызов: уменьшаем количество сдвигов и остаемся в той же строке
        recursiveRightShift(matrix, rows, cols, shifts - 1, row);
    }
    else {
        //  Если сдвиги для текущей строки выполнены или их не нужно делать
        // Переходим к следующей строке и начинаем сдвиги сначала (если требуется)
        recursiveRightShift(matrix, rows, cols, shifts, row + 1); // Рекурсивный вызов для следующей строки
    }
}

// Задание 3: Рекурсивный сдвиг массива влево
void recursiveLeftShift(int** matrix, int rows, int cols, int shifts, int row = 0) {
    // Базовый случай 1: Если мы достигли конца массива (обработали все строки)
    if (row == rows) {
        return; // Завершаем рекурсию
    }

    // Обрабатываем сдвиги для текущей строки
    if (shifts > 0) {
        // Выполняем сдвиг на одну позицию влево для текущей строки

        // Сохраняем первый элемент строки во временную переменную
        int temp = matrix[row][0];

        // Сдвигаем элементы строки на одну позицию влево (начиная с начала)
        for (int col = 0; col < cols - 1; ++col) {
            matrix[row][col] = matrix[row][col + 1]; // Переносим элементы влево
        }

        //  Помещаем сохраненный первый элемент на последнее место
        matrix[row][cols - 1] = temp;

        // Рекурсивный вызов: уменьшаем количество сдвигов и остаемся в той же строке
        recursiveLeftShift(matrix, rows, cols, shifts - 1, row);
    }
    else {
        //  Если сдвиги для текущей строки выполнены или их не нужно делать
        // Переходим к следующей строке и начинаем сдвиги сначала (если требуется)
        recursiveLeftShift(matrix, rows, cols, shifts, row + 1); // Рекурсивный вызов для следующей строки
    }
}
// Задание 4: Рекурсивный сдвиг массива вниз
void recursiveDownShift(int** matrix, int rows, int cols, int shifts, int col = 0) {
    // Базовый случай 1: Если мы достигли конца массива (обработали все столбцы)
    if (col == cols) {
        return; // Завершаем рекурсию
    }

    // Обрабатываем сдвиги для текущего столбца
    if (shifts > 0) {
        // Выполняем сдвиг на одну позицию вниз для текущего столбца

        //  Сохраняем последний элемент столбца во временную переменную
        int temp = matrix[rows - 1][col];

        // Сдвигаем элементы столбца на одну позицию вниз (начиная с конца)
        for (int row = rows - 1; row > 0; --row) {
            matrix[row][col] = matrix[row - 1][col]; // Переносим элементы вниз
        }

        //  Помещаем сохраненный последний элемент на первое место
        matrix[0][col] = temp;

        // Рекурсивный вызов: уменьшаем количество сдвигов и остаемся в том же столбце
        recursiveDownShift(matrix, rows, cols, shifts - 1, col);
    }
    else {
        // Базовый случай 2: Если сдвиги для текущего столбца выполнены или их не нужно делать
        // Переходим к следующему столбцу и начинаем сдвиги сначала (если требуется)
        recursiveDownShift(matrix, rows, cols, shifts, col + 1); // Рекурсивный вызов для следующего столбца
    }
}

// Вспомогательная функция для вывода двумерного массива
void printMatrix(int** matrix, int rows, int cols) {
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cout << matrix[i][j] << " "; // Выводим элемент и пробел
        }
        cout << endl; // Переходим на новую строку после вывода всех элементов строки
    }
}
int main() {
    setlocale(LC_ALL, "ru");
    // Пример использования задания 1 (бинарный поиск)
    int sortedArray[] = { 2, 5, 8, 12, 16, 23, 38, 56, 72, 91 };
    int size = sizeof(sortedArray) / sizeof(sortedArray[0]);
    int target = 23;
    int position = recursiveBinarySearch(sortedArray, target, 0, size - 1);
    if (position != -1) {
        cout << "Задание 1: Элемент " << target << " найден в позиции " << position << endl;
    }
    else {
        cout << "Задание 1: Элемент " << target << " не найден." << endl;
    }

    // Пример использования задания 2 (сдвиг вправо)
    int rows = 3;
    int cols = 4;
    int** matrixRight = new int* [rows];
    for (int i = 0; i < rows; ++i) {
        matrixRight[i] = new int[cols];
    }

    int init_matrixRight[3][4] = {
    {4, 5, 6, 7},
    {1, 2, 4, 1},
    {4, 5, 6, 9}
    };

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; j++) {
            matrixRight[i][j] = init_matrixRight[i][j];
        }
    }

    cout << "\nЗадание 2: Исходный массив:\n";
    printMatrix(matrixRight, rows, cols);
    recursiveRightShift(matrixRight, rows, cols, 3);
    cout << "Массив после сдвига вправо на 3:\n";
    printMatrix(matrixRight, rows, cols);
    for (int i = 0; i < rows; ++i) {
        delete[] matrixRight[i];
    }
    delete[] matrixRight;

    // Пример использования задания 3 (сдвиг влево)
    int** matrixLeft = new int* [rows];
    for (int i = 0; i < rows; i++)
    {
        matrixLeft[i] = new int[cols];
    }
    int init_matrixLeft[3][4] = {
        {4, 5, 6, 7},
       {1, 2, 4, 1},
       {4, 5, 6, 9}
    };

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; j++) {
            matrixLeft[i][j] = init_matrixLeft[i][j];
        }
    }
    cout << "\nЗадание 3: Исходный массив:\n";
    printMatrix(matrixLeft, rows, cols);
    recursiveLeftShift(matrixLeft, rows, cols, 2);
    cout << "Массив после сдвига влево на 2:\n";
    printMatrix(matrixLeft, rows, cols);
    for (int i = 0; i < rows; ++i) {
        delete[] matrixLeft[i];
    }
    delete[] matrixLeft;

    // Пример использования задания 4 (сдвиг вниз)
    int** matrixDown = new int* [rows];
    for (int i = 0; i < rows; ++i)
    {
        matrixDown[i] = new int[cols];
    }
    int init_matrixDown[3][4] = {
     {4, 5, 6, 7},
     {1, 2, 4, 1},
     {4, 3, 6, 8}
    };

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; j++) {
            matrixDown[i][j] = init_matrixDown[i][j];
        }
    }
    cout << "\nЗадание 4: Исходный массив:\n";
    printMatrix(matrixDown, rows, cols);
    recursiveDownShift(matrixDown, rows, cols, 1);
    cout << "Массив после сдвига вниз на 1:\n";
    printMatrix(matrixDown, rows, cols);
    for (int i = 0; i < rows; ++i) {
        delete[] matrixDown[i];
    }
    delete[] matrixDown;


    return 0;
}
