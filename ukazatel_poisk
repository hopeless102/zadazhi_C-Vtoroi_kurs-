#include <iostream>

using namespace std;

// Задание 1: Рекурсивный бинарный поиск
int recursiveBinarySearch(const int arr[], int target, int left, int right) {
    if (left > right) {
        return -1;
    }

    int mid = left + (right - left) / 2;

    if (arr[mid] == target) {
        return mid;
    }
    else if (arr[mid] < target) {
        return recursiveBinarySearch(arr, target, mid + 1, right);
    }
    else {
        return recursiveBinarySearch(arr, target, left, mid - 1);
    }
}

// Задание 2: Рекурсивный сдвиг массива вправо
void recursiveRightShift(int** matrix, int rows, int cols, int shifts, int row = 0) {
    if (row == rows) {
        return;
    }

    if (shifts > 0) {
        int temp = matrix[row][cols - 1];
        for (int col = cols - 1; col > 0; --col) {
            matrix[row][col] = matrix[row][col - 1];
        }
        matrix[row][0] = temp;
        recursiveRightShift(matrix, rows, cols, shifts - 1, row);
    }
    else {
        recursiveRightShift(matrix, rows, cols, shifts, row + 1);
    }
}

// Задание 3: Рекурсивный сдвиг массива влево
void recursiveLeftShift(int** matrix, int rows, int cols, int shifts, int row = 0) {
    if (row == rows) {
        return;
    }
    if (shifts > 0) {
        int temp = matrix[row][0];
        for (int col = 0; col < cols - 1; ++col) {
            matrix[row][col] = matrix[row][col + 1];
        }
        matrix[row][cols - 1] = temp;
        recursiveLeftShift(matrix, rows, cols, shifts - 1, row);
    }
    else {
        recursiveLeftShift(matrix, rows, cols, shifts, row + 1);
    }
}

// Задание 4: Рекурсивный сдвиг массива вниз
void recursiveDownShift(int** matrix, int rows, int cols, int shifts, int col = 0) {
    if (col == cols) {
        return;
    }
    if (shifts > 0) {
        int temp = matrix[rows - 1][col];
        for (int row = rows - 1; row > 0; --row) {
            matrix[row][col] = matrix[row - 1][col];
        }
        matrix[0][col] = temp;
        recursiveDownShift(matrix, rows, cols, shifts - 1, col);
    }
    else {
        recursiveDownShift(matrix, rows, cols, shifts, col + 1);
    }
}

// Вспомогательная функция для вывода двумерного массива
void printMatrix(int** matrix, int rows, int cols) {
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    setlocale(LC_ALL, "ru");
    // Пример использования задания 1 (бинарный поиск)
    int sortedArray[] = { 2, 5, 8, 12, 16, 23, 38, 56, 72, 91 };
    int size = sizeof(sortedArray) / sizeof(sortedArray[0]);
    int target = 23;
    int position = recursiveBinarySearch(sortedArray, target, 0, size - 1);
    if (position != -1) {
        cout << "Задание 1: Элемент " << target << " найден в позиции " << position << endl;
    }
    else {
        cout << "Задание 1: Элемент " << target << " не найден." << endl;
    }

    // Пример использования задания 2 (сдвиг вправо)
    int rows = 3;
    int cols = 4;
    int** matrixRight = new int* [rows];
    for (int i = 0; i < rows; ++i) {
        matrixRight[i] = new int[cols];
    }

    int init_matrixRight[3][4] = {
    {4, 5, 6, 7},
    {1, 2, 4, 1},
    {4, 5, 6, 9}
    };

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; j++) {
            matrixRight[i][j] = init_matrixRight[i][j];
        }
    }

    cout << "\nЗадание 2: Исходный массив:\n";
    printMatrix(matrixRight, rows, cols);
    recursiveRightShift(matrixRight, rows, cols, 3);
    cout << "Массив после сдвига вправо на 3:\n";
    printMatrix(matrixRight, rows, cols);
    for (int i = 0; i < rows; ++i) {
        delete[] matrixRight[i];
    }
    delete[] matrixRight;

    // Пример использования задания 3 (сдвиг влево)
    int** matrixLeft = new int* [rows];
    for (int i = 0; i < rows; i++)
    {
        matrixLeft[i] = new int[cols];
    }
    int init_matrixLeft[3][4] = {
        {4, 5, 6, 7},
       {1, 2, 4, 1},
       {4, 5, 6, 9}
    };

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; j++) {
            matrixLeft[i][j] = init_matrixLeft[i][j];
        }
    }
    cout << "\nЗадание 3: Исходный массив:\n";
    printMatrix(matrixLeft, rows, cols);
    recursiveLeftShift(matrixLeft, rows, cols, 2);
    cout << "Массив после сдвига влево на 2:\n";
    printMatrix(matrixLeft, rows, cols);
    for (int i = 0; i < rows; ++i) {
        delete[] matrixLeft[i];
    }
    delete[] matrixLeft;

    // Пример использования задания 4 (сдвиг вниз)
    int** matrixDown = new int* [rows];
    for (int i = 0; i < rows; ++i)
    {
        matrixDown[i] = new int[cols];
    }
    int init_matrixDown[3][4] = {
     {4, 5, 6, 7},
     {1, 2, 4, 1},
     {4, 3, 6, 8}
    };

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; j++) {
            matrixDown[i][j] = init_matrixDown[i][j];
        }
    }
    cout << "\nЗадание 4: Исходный массив:\n";
    printMatrix(matrixDown, rows, cols);
    recursiveDownShift(matrixDown, rows, cols, 1);
    cout << "Массив после сдвига вниз на 1:\n";
    printMatrix(matrixDown, rows, cols);
    for (int i = 0; i < rows; ++i) {
        delete[] matrixDown[i];
    }
    delete[] matrixDown;


    return 0;
}
