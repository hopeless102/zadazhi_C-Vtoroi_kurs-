#include <iostream>
#include <vector>
#include <iomanip>
#include <numeric> // Для accumulate

using namespace std;

double lagrange(const vector<double>& x, int k, double point) {
    double result = 1.0;
    for (size_t i = 0; i < x.size(); ++i) {
        if (i != k) {
            result *= (point - x[i]) / (x[k] - x[i]);
        }
    }
    return result;
}

double lagrangeIntern(const vector<double>& x, const vector<double>& y, double point) {
    double result = 0.0;
    for (size_t k = 0; k < x.size(); ++k) {
        result += y[k] * lagrange(x, k, point);
    }
    return result;
}

int main() {
    vector<double> x = {0.0, 1.0, 2.0, 3.0}; // Узлы интерполяции
    vector<double> y = {1.0, 3.0, 2.0, 4.0}; // Значения функции в узлах

    double point = 1.5; // Точка для вычисления значения интерполяции
    double interpolatedValue = lagrangeInter(x, y, point);

    cout << "Интерполяция Лагранжа:" << endl;
    cout << "Значение в точке x = " << point << " равно: " << fixed << setprecision(4) << interpolatedValue << endl;

    return 0;
}
